


JWT Authentication in Python
12 Oct 2019

JSON Web Token (JWT) provide a means of transmitting information from the client to the server in a secured way.

Read more ›




Recent posts

Redis Queue implementation in Python
Slack Bot using Python Flask





JWT Authentication in Python
12 Oct 2019

JSON Web Token (JWT) provide a means of transmitting information from the client to the server in a secured way.

Read more ›




Recent posts

Redis Queue implementation in Python
Slack Bot using Python Flask






JWT Authentication in Python

12 Oct 2019
JSON Web Token (JWT) provide a means of transmitting information from the client to the server in a secured way.



Redis Queue implementation in Python

31 Aug 2019
RQ (Redis Queue) is a simple Python library for queueing jobs and processing them in the background with workers.



Slack Bot using Python Flask

9 Aug 2019
Usually bots perform two operation one to receive the user messages and the other is to provide response to the obtained messages. Dynamically changing response needs backend works to done.



About



I'm Vigneshwar Ravichandran an engineering student with lots of passion over developing especially Back-end Developing. Always love to explore new languages and frameworks. Coding was not something I learnt to do or was chosen out of the options I had, it was something I was comfortable doing. A small story line of mine 'Years ago Developing was my crush, now its my love and soon its gona become my life partner '.
Unlike many, I had some type of job description for my career. I don't believe in the quantity of employees in the company, always believe the quality in them.
I need to thank someone - Naveen Honest Raj. He is the one who moulded me into a good script. The Developer whom I admire the most.
I believe in the concept that a good logic builder can easily turn into a great programmer. I have worked a lot on Python and its framework. I still can't forget the days which made me feel like programming was not my cup of tea. It took some time to overcome than illusion.

You can find me on Twitter, GitHub, Instagram and LinkedIn, or reach me via email.

Page not found

Page not found

JWT Authentication in Python
12 Oct 2019

JSON Web Token (JWT) provide a means of transmitting information from the client to the server in a secured way.

Since there are 3 parts separated by a ., each section is created differently. We have the 3 parts which are:

header
payload
signature


Generation JSON Web Token:

An API endpoint that accepts username and password via JSON payload and returns access_token which is the JSON Web Token we can use.
We must pass the token as part of the Authorization header, like – JWT <token>.

One of the most popular library for JSON web token generation is PyJWT

$ pip install pyjwt

Creating a JWT in Python:
Here the user details are encoded for obtaining the JSON Web Token. Always try to store the encrypted password not the original one for security purpose. Here sha256 library is used for password encryption and decryption. The token which is generated is usually not in UTF-8 format. So .decode(‘utf-8) is used for the conversion.
if sha256_crypt.verify(password, hashed_password):
  # Encoding user details
  access_token = jwt.encode({'username' : username, 'hashed_password' : hashed_password}, 'secret', algorithm='HS256')
  token = access_token.decode('utf-8')
  return jsonify({
    'auth_token' : token
    })
Decoding of the JSON Web token provides the user details as previously the user details were encoded to make the token some sense.
token = request.headers['token']
access_token = token.encode('utf-8')
user_details = jwt.decode(access_token, 'secret')
return jsonify(user_details)
For any queries ping me at Twitter.

#Python 
        #JWT 
        #Authentication 
      

Page not found

JWT Authentication in Python
12 Oct 2019

JSON Web Token (JWT) provide a means of transmitting information from the client to the server in a secured way.

Since there are 3 parts separated by a ., each section is created differently. We have the 3 parts which are:

header
payload
signature


Generation JSON Web Token:

An API endpoint that accepts username and password via JSON payload and returns access_token which is the JSON Web Token we can use.
We must pass the token as part of the Authorization header, like – JWT <token>.

One of the most popular library for JSON web token generation is PyJWT

$ pip install pyjwt

Creating a JWT in Python:
Here the user details are encoded for obtaining the JSON Web Token. Always try to store the encrypted password not the original one for security purpose. Here sha256 library is used for password encryption and decryption. The token which is generated is usually not in UTF-8 format. So .decode(‘utf-8) is used for the conversion.
if sha256_crypt.verify(password, hashed_password):
  # Encoding user details
  access_token = jwt.encode({'username' : username, 'hashed_password' : hashed_password}, 'secret', algorithm='HS256')
  token = access_token.decode('utf-8')
  return jsonify({
    'auth_token' : token
    })
Decoding of the JSON Web token provides the user details as previously the user details were encoded to make the token some sense.
token = request.headers['token']
access_token = token.encode('utf-8')
user_details = jwt.decode(access_token, 'secret')
return jsonify(user_details)
For any queries ping me at Twitter.

#Python 
        #JWT 
        #Authentication 
      
https://vigneshwarravichandran.ml//blog/redis-queue-implementation-in-python/'charmap' codec can't encode character '\u279c' in position 240: character maps to <undefined>
Slack Bot using Python Flask
9 Aug 2019

Usually bots perform two operation one to receive the user messages and the other is to provide response to the obtained messages. Dynamically changing response needs backend works to done.

Receiving Messages :
For receiving messages go to Event Subscription page and enable it and provide your ngrok redirected link.

First verify the payload by getting it in POST method and then returning the same payload.
from flask import Flask, request, Response
app = Flask(__name__)
@app.route(‘/’, methods=[‘POST’])
def verify():
data = request.json
return data
if __name__ == “__main__”:
app.run(debug=True)
The same code can be used to get the message payload which gives the information about the message. To check it just print data for reference.
Sending Response :
Use the Incoming Webhook page and enable it.

Use the below code snippet for responding to the incoming message using python webhook.
from flask import Flask, request, Response
import requests
import json
app = Flask(__name__)
@app.route(‘/’, methods=[‘POST’])
def verify():
data = request.json
if data[‘event’][‘type’] == “app_mention”:
user_text = data[‘event’][‘text’]
user = data[‘event’][‘user’]
webhook_url = ‘***********Your webhook url******************’
slack_data = { “text”: “How can I help you ?” }
response = requests.post(
webhook_url, data=json.dumps(slack_data),
headers={‘Content-Type’: ‘application/json’}
)
return(‘’, 204)
if __name__ == “__main__”:
app.run(debug=True)
For any queries ping me at https://twitter.com/vigneshwar1998

#Slack 
        #Bot 
        #Python 
        #Flask 
      
